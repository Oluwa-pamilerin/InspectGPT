I am building a vscode extension that opens up a webview using a getWebviewContents function which calls a separate webview .html file to display its contents. Now, I want you to merge the html code into the extension.js  code and return the webview content directly from the getWebviewContent() function, retaining all the funtionalities.
extension.js; 
function getWebviewContent(selectedText, bardResponse) {
  // Read the content of the webview.html file
  const webviewPath = path.join(__dirname, "webview.html");
  const webviewContent = fs.readFileSync(webviewPath, "utf-8");

  messagesOutside = [];
  messagesOutside.push({
    content: selectedText,
  });
  messagesOutside.push({
    content: bardResponse,
  });
  var rawSelectedText = stringToBinary(selectedText);
  const formattedResponse = bardResponse
    .split("\n")
    .filter((line) => line.trim() !== "")
    .map((paragraph) => `<p>${paragraph}</p>`)
    .join("")
    .toString();
  const codeRegex = /```([\s\S]*?)```/g;
  function replaceParagraphTagsWithNewlines(match) {
    const replacedMatch = match.replace(/<\/p><p>/g, "\n").replace(/```/g, "");
    return (
      "<pre style='padding: 10px; padding-right: 10px; border-radius:5px; background-color: black; white-space: no-wrap; overflow-x: auto;'><pre><code style = 'color: white;'><xmp>" +
      replacedMatch +
      "</xmp></code></pre></pre>"
    );
  }
  const searchedResponse = formattedResponse.replace(
    codeRegex,
    replaceParagraphTagsWithNewlines
  );

  selectedText = JSON.stringify(selectedText).replace(/'/g, '"');

  // Replace placeholders in the HTML template with actual content
  const finalContent = webviewContent
    .replace("{{selectedText}}", selectedText)
    .replace("{{searchedResponse}}", searchedResponse)
    .replace("{{apiKey}}", apiKey)
    .replace(
      "{{DiscussServiceClient}}",
      require("@google-ai/generativelanguage")
    )
    .replace("{{GoogleAuth}}", require("google-auth-library"));

  return finalContent;
}
webview.html
<!DOCTYPE html>
<html>

<head>
<body>
    <div class="chat-container">
        <div class="chat">
            <div id="bot-message" class="bot-message">{{searchedResponse}}</div>
        </div>
        <div class="chat-container">
            <!-- Chat messages will go here -->
        </div>
        <div class="typing-container">
            <div class="typing-content">
                <div class="typing-textarea">
                    <textarea id="chat-input" spellcheck="false"
                        style="background-color: #444654; border-color: #444654;" placeholder="Enter a prompt here"
                        required></textarea>
                    <span id="send-btn" class="material-symbols-rounded">send</span>
                </div>
                <div class="typing-controls">
                    <!-- <span id="theme-btn" class="material-symbols-rounded">light_mode</span>
                    <span id="delete-btn" class="material-symbols-rounded">delete</span> -->
                </div>
            </div>

        </div>
        <script type="module">

            const chatInput = document.querySelector("#chat-input");
            const sendButton = document.querySelector("#send-btn");
            const initialInputHeight = chatInput.scrollHeight;
            const chatContainer = document.querySelector(".chat-container");
            const apiKey = ('{{apiKey}}');
            var userText = chatInput.value.trim(); // Get chatInput value and remove extra spaces

            const vscode = acquireVsCodeApi();
            let DiscussServiceClient;
            let GoogleAuth;

            window.addEventListener('message', event => {
                const message = event.data;

                if (message.command === 'initialize') {
                    console.log("Message");
                    console.log(message.data);
                    DiscussServiceClient = message.data.DiscussServiceClient;
                    GoogleAuth = message.data.GoogleAuth;

                    // Now you have access to DiscussServiceClient and GoogleAuth
                    // Use them as needed
                } else if (message.command === 'updateText') {
                    // Handle the updateText command
                    const newText = message.text;
                    // Update the webview with the new text
                    // (Add your logic to handle the updated text)
                }
            });
            console.log("Discuss");
            console.log(DiscussServiceClient);
            console.log("GoogleAuth");
            console.log(GoogleAuth);


            const getChatResponse = async (incomingChatDiv) => {
                const API_URL = "https://api.openai.com/v1/completions";
                const pElement = document.createElement("p");


                // // logic for open ai
                // // Define the properties and data for the API request
                // const requestOptions = {
                //     method: "POST",
                //     headers: {
                //         "Content-Type": "application/json",
                //         "Authorization": `Bearer ${API_KEY}`
                //     },
                //     body: JSON.stringify({
                //         model: "text-davinci-003",
                //         prompt: userText,
                //         max_tokens: 2048,
                //         temperature: 0.2,
                //         n: 1,
                //         stop: null
                //     })
                // }

                // // Send POST request to API, get response and set the reponse as paragraph element text
                // try {
                //     const response = await (await fetch(API_URL, requestOptions)).json();
                //     pElement.textContent = response.choices[0].text.trim();
                // } catch (error) { // Add error class to the paragraph element and set error text
                //     pElement.classList.add("error");
                //     pElement.textContent = "Oops! Something went wrong while retrieving the response. Please try again.";
                // }


                // Create an outgoing chat div with user's message and append it to chat container
                const outgoingChatDiv = createChatElement(html, "outgoing");
                chatContainer.querySelector(".default-text")?.remove();
                chatContainer.appendChild(outgoingChatDiv);
                chatContainer.scrollTo(0, chatContainer.scrollHeight);
                setTimeout(showTypingAnimation, 500);
            }

            document.addEventListener('DOMContentLoaded', () => {
                const textareaEle = document.getElementById('chat-input');
                textareaEle.addEventListener('input', () => {
                    textareaEle.style.height = 'auto';
                    textareaEle.style.height = `${textareaEle.scrollHeight}px`;
                });
            });

            function handleInput(text, callback, content = "") {
                vscode.postMessage({
                    command: "handleInput",
                    text: text,
                    content: content,
                });
            }

            // Set up a listener to handle the result
            window.addEventListener("message", function (event) {
                if (event.data.command === "handleInputResult") {
                    console.log(event.data.result);
                    appendMessage("bot", event.data.result);
                }
            });

            function handleFollowup(selectedText, input) {
                vscode.postMessage({
                    command: "followup",
                    selectedText: selectedText,
                    input: input,
                });
            }

            function retry(selectedText) {
                vscode.postMessage({
                    command: "retry",
                    selectedText: selectedText,
                });
            }
            function appendMessage(sender, message) {
                const chat = document.querySelector(".chat");
                const messageElement = document.createElement("div");
                messageElement.className =
                    sender === "user" ? "user-message" : "bot-message";
                const icon = document.createElement("span");
                icon.className = sender === "user" ? "user-icon" : "bot-icon";
                icon.innerHTML = sender === "user" ? "ðŸ‘¤  " : "ðŸ¤–  "; // Add icons for the user and bot
                messageElement.appendChild(icon);
                messageElement.innerHTML += message;
                chat.appendChild(messageElement);
            }

            // Example function for sending a message to Bard
            function sendToBard(text, selectedText) {
                appendMessage(
                    "bot",
                    "Seen: " + text + " SelectedText: " + selectedText
                );
                console.log(handleFollowup(selectedText, text));
            }

            // Add an event listener to the "Read More" link.
            const readMoreLinks = document.querySelectorAll(".read-more");
            readMoreLinks.forEach((link) => {
                link.addEventListener("click", (event) => {
                    // Prevent the default link behavior.
                    event.preventDefault();

                    // Get the parent element of the "Read More" link.
                    const parentElement = link.closest(".truncated-text");

                    // Remove the "Read More" link from the parent element.
                    link.remove();

                    // Display the remaining lines of text.
                    parentElement.classList.remove("truncated");
                });
            });



            chatInput.addEventListener("keydown", (e) => {
                // If the Enter key is pressed without Shift and the window width is larger 
                // than 800 pixels, handle the outgoing chat
                if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
                    e.preventDefault();
                    handleOutgoingChat();
                }
            });

            sendButton.addEventListener("click", handleOutgoingChat);
            chatInput.addEventListener("keyup", (event) => {
                if (event.key === "Enter") {
                    handleOutgoingChat
                }
            }
            );



            const createChatElement = (content, className) => {
                // Create new div and apply chat, specified class and set html content of div
                const chatDiv = document.createElement("div");
                chatDiv.classList.add("chat", className);
                chatDiv.innerHTML = content;
                return chatDiv; // Return the created chat div
            }

            const showTypingAnimation = () => {
                // Display the typing animation and call the getChatResponse function
                const html = `<div class="chat-content">
                    <div class="chat-details">
                        <img src="https://pbs.twimg.com/media/GA6D0t9WAAAcWXL?format=png&name=small" alt="chatbot-img" style="border-radius:100%; width: 30px; height: 30px;">
                        <div class="typing-animation">
                            <div class="typing-dot" style="--delay: 0.2s"></div>
                            <div class="typing-dot" style="--delay: 0.3s"></div>
                            <div class="typing-dot" style="--delay: 0.4s"></div>
                        </div>
                    </div>
                    <span onclick="copyResponse(this)" class="material-symbols-rounded">content_copy</span>
                </div>`;
                // Create an incoming chat div with typing animation and append it to chat container
                const incomingChatDiv = createChatElement(html, "incoming");
                chatContainer.appendChild(incomingChatDiv);
                chatContainer.scrollTo(0, chatContainer.scrollHeight);
                getChatResponse(incomingChatDiv);
            }


        </script>
</body>

</html>